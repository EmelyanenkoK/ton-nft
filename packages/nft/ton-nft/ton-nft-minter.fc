;; NFT collection smart contract

int notification::ownership_transferred() asm "0x10 PUSHINT";
int deployment_op() asm "0xFF11 PUSHINT";
int equal_slices (slice s1, slice s2) asm "SDEQ";

;; storage scheme 
;; storage#_ seqno:uint32 collection_id:uint32 public_key:bits256
;;           next_index:uint64 nft_code:^Cell = Storage;

(int, int, int, int, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return  
    (ds~load_uint(32), 
     ds~load_uint(32), 
     ds~load_uint(256), 
     ds~load_uint(64),
     ds~load_ref());
}

() save_data(int seqno, int collection_id, int public_key, int next_index, cell code) impure inline {
  set_data(begin_cell()
    .store_uint(seqno, 32)
    .store_uint(collection_id, 32)
    .store_uint(public_key, 256)
    .store_uint(next_index, 64)
    .store_ref(code)
    .end_cell());
}

cell calculate_nft_state_init (int index, cell code) {
  cell data = begin_cell().store_uint(index,64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0,2).store_dict(code).store_dict(data).store_uint(0,1).end_cell();
}

slice calculate_nft_address (int workchain, cell init_data) {
  return begin_cell().store_uint(4, 3)
                     .store_int(workchain, 8)
                     .store_uint(cell_hash(init_data), 256)
                     .end_cell()
                     .begin_parse();
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
}

() recv_external(slice in_msg) impure {
  var signature = in_msg~load_bits(512);
  var cs = in_msg;
  var (collection_id, valid_until, msg_seqno) = (cs~load_uint(32), cs~load_uint(32), cs~load_uint(32));
  throw_if(36, valid_until <= now());
  var ds = get_data().begin_parse();
  var (stored_seqno, stored_collection_id, public_key, next_index, code) = load_data();
  ds.end_parse();
  throw_unless(33, msg_seqno == stored_seqno);
  throw_unless(34, collection_id == stored_collection_id);
  throw_unless(35, check_signature(slice_hash(in_msg), signature, public_key));
  accept_message();
  stored_seqno += 1;
  save_data(stored_seqno, stored_collection_id, public_key, next_index, code);
  commit();
  cs~touch();
  int op = cs~load_uint(8);
  raw_reserve(1000000000, 2);
  if (op == 0) { ;; simple send
    while (cs.slice_refs()) {
      var mode = cs~load_uint(8);
      ;; Do not allow to send message without 2 flag to eliminate possibility of 
      ;; contract drain
      send_raw_message(cs~load_ref(), mode & 2);
    }
    return ();
  }

  if (op == 1) { ;; deploy new nft
    cell state_init = calculate_nft_state_init(next_index, code);
    slice nft_address = calculate_nft_address(0, state_init);
    var msg = begin_cell()
      .store_uint(0x18, 6)
      .store_slice(nft_address)
      .store_grams(cs~load_grams())
      .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
      .store_ref(state_init)
      .store_slice(cs);
    send_raw_message(msg.end_cell(), 3);
    next_index += 1;
    save_data(stored_seqno, stored_collection_id, public_key, next_index, code);
    return();
  }
}

;; Get methods

int seqno() method_id {
  return get_data().begin_parse().preload_uint(32);
}

int get_subwallet_id() method_id {
  return get_data().begin_parse().skip_bits(32).preload_uint(32);
}

int get_public_key() method_id {
  var cs = get_data().begin_parse().skip_bits(64);
  return cs.preload_uint(256);
}

int get_next_index() method_id {
  var cs = get_data().begin_parse().skip_bits(64 + 256);
  return cs.preload_uint(64);
}

slice get_nft_address_by_index(index) method_id {
    var (stored_seqno, stored_collection_id, public_key, next_index, code) = load_data();
    cell state_init = calculate_nft_state_init(index, code);
    return calculate_nft_address(0, state_init);
}

(int, int) get_std_nft_address_by_index(int index) method_id {
    var (stored_seqno, stored_collection_id, public_key, next_index, code) = load_data();
    cell state_init = calculate_nft_state_init(index, code);
    return parse_std_addr(calculate_nft_address(0, state_init));
}
