;;
;;  TON NFT Smart Contract
;;

(int) equal_slices (slice s1, slice s2) asm "SDEQ";

;;
;;
;;  Storage
;;
;;  uint1 inited
;;  cell name
;;  cell symbol
;;  MsgAddressInt creator
;;  MsgAddressInt collection
;;  MsgAddressInt owner
;;  cell content
;;
;;

_ load_data() impure {
    slice ds = get_data().begin_parse();
    int inited = ds~load_uint(1);     ;; inited
    var res = (
        ds~load_ref(),                ;; name
        ds~load_ref(),                ;; symbol
        ds~load_msg_addr(),           ;; editor
        ds~load_msg_addr(),           ;; collection
        ds~load_msg_addr(),           ;; owner
        ds~load_ref()               ;; content
    );
    ds.end_parse();
    return res;
}

() store_data(var ds) impure {
    (cell name, cell symbol, slice editor, slice collection, slice owner, cell content) = ds;
    set_data(
        begin_cell()
            .store_uint(1, 1)
            .store_ref(name)
            .store_ref(symbol)
            .store_slice(editor)
            .store_slice(collection)
            .store_slice(owner)
            .store_ref(content)
            .end_cell()
    );
}

;;
;; Serializes
;; addr_std$10 anycast:(Maybe Anycast) workchain_id:int8 address:bits256 = MsgAddressInt;
;; output is 267 bits
;;
slice pack_std_addr(int wc, int addr) {
    return begin_cell()
        .store_uint(2, 2)
        .store_uint(0, 1)
        .store_int(wc, 8)
        .store_uint(addr, 256)
        .end_cell()
        .begin_parse();
}

(int) get_decimal_symbol(int symbol_code) {
  symbol_code -= 48;
  throw_unless(400, (symbol_code < 0) | (symbol_code > 9) );
  return symbol_code;
}

(slice, (int)) ~load_hex_symbol(slice source) {
    int n = source~load_uint(8);
    n = n - 48;
    throw_unless(400, n >= 0);
    if (n < 10) {
        return (source, (n));
    }
    n = n - 7;
    throw_unless(400, n >= 0);
    if (n < 16) {
        return (source, (n));
    }
    n = n - 32;
    throw_unless(400, (n >= 0) & (n < 16));
    return (source, (n));
}

(slice, (int, int)) ~parse_raw_text_address(slice source) {
    int n = source.preload_uint(8);
    var is_negative = n == 0x2d; ;; minus sign
    if is_negative {
      source~skip_bits(8);
    }

    int wc = 0;
    int parsed? = 0;
    ;; Parse workchain id
    while (~ parsed?) {
        int symbol = source~load_uint(8);
        parsed? = symbol == 0x3a;
        if (~ parsed?) {
          wc *= 10;
          wc += get_decimal_symbol(symbol);
        }
    }

    if is_negative {
        wc *= -1;
    }

    ;; Parse address 64 bytes
    int address = 0;
    repeat (64) {
        address = address * 16 + source~load_hex_symbol();
    }

    return (source, (wc, address));
}

() transfer_ownership (slice sender, slice new_owner, int query_id) impure {
    (cell name, cell symbol, slice editor, slice collection, slice owner, cell content) = load_data();
    throw_unless(401, equal_slices(sender, owner));
    ;; TODO notify
    store_data(name, symbol, editor, collection, new_owner, content);
}

() handle_comment_message (slice msg_body, slice sender_address) impure {
    ;; For giftTo request one Cell is not enough
    if (msg_body.slice_data_empty?() & (msg_body.slice_refs() == 1)) {
      cell ref_msg = msg_body~load_ref();
      msg_body = ref_msg.begin_parse();
    }

    ;; 'giftTo:'
    int command = msg_body~load_uint(56);
    throw_unless(400, command == 0x67696674546f3a);
    var (int destination_wc, int destination_address) = msg_body~parse_raw_text_address();
    var new_owner_address = pack_std_addr(destination_wc, destination_address);
    return transfer_ownership(sender_address, new_owner_address, 0);
}

() recv_internal(int smc_balance, int msg_value, cell msg, slice msg_body) {
    if (msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    slice cs = msg.begin_parse();
    int flags = cs~load_uint(4);

    ;; ignore all bounced messages
    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    (int wc, int addr) = parse_std_addr(sender_address);

    int op = msg_body~load_uint(32);

    ;; Message with comment
    if (op == 0) {
        return handle_comment_message(msg_body, sender_address);
    }
    if (op == 1) { ;; transfer ownership
      int query_id = msg_body~load_uint(64);
      slice new_owner = msg_body~load_msg_addr();
      transfer_ownership(sender_address, new_owner, query_id);
    }
}

() recv_external(slice in_msg) {
}

;;
;;  GET Methods
;;

cell get_name() method_id {
	(cell name, _, _, _, _, _) = load_data();
	return name;
}

cell get_symbol() method_id {
    (_, cell symbol, _, _, _, _) = load_data();
    return symbol;
}

(int, int) get_editor() method_id {
     (_, _, slice editor, _, _, _) = load_data();
     if editor.slice_bits() == 2 {
       return (0,0);
     }
     return editor.parse_std_addr();
}

(int, int) get_collection() method_id {
     (_, _, _, slice collection, _, _) = load_data();
     if collection.slice_bits() == 2 {
       return (0,0);
     }
     return collection.parse_std_addr();
}

(int, int) get_owner() method_id {
     (_, _, _, _, slice owner,  _) = load_data();
     return owner.parse_std_addr();
}

cell get_content() method_id {
     (_, _, _, _, _, cell content) = load_data();
     return content;
}

{- TODO
(int, int) supported_interfaces() method_id {
    ;; 126808: BasicNFT
    ;; 81264: BasicIntrospection
    return (126808, 81264);
}
-}
